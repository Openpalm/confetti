// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© LucemAnb

//@version=4
//@author=lucemanb

//
//       THIS CODE IS BASED FROM THE MT4 ZIGZAG INDICATOR
//       THE ZIGZAG SETTINGS FOR THE MAIN ONE ON TRADINGVIEW DO NOT WORK THE SAME AS MT4
//       I HOPE U LOVE IT
//

// Ping me for donations, Collaborations or Support


////////
// Seek Menu
study("zigzag ma bb confetti", shorttitle = "fettucini heuristics",  max_labels_count=51, max_lines_count=50, overlay = true)
lableShow = input(title="Show Lables", group="Display", type=input.bool, defval=true)
labelTiny = input(title="Show Prices", group="Display", type=input.bool, defval=true)
//size.small

//bb
bb() => 
	length = 20
	src = close
	mult = 2.0
	basis = sma(src, length)
	dev = mult * stdev(src, length)
	upper = basis + dev
	lower = basis - dev
	offset = input(0, "Offset", type = input.integer, minval = -500, maxval = 500)
	[upper, lower, basis, offset]

[upper, lower, basis, offset]= bb()

bbp1 = plot(upper, "Upper", color=#2962FF, offset = offset)
bbp2 = plot(lower, "Lower", color=#2962FF, offset = offset)
//plot(basis, "Basis", color=#FF6D00, offset = offset)
fill(bbp1, bbp2, title = "Background", color=color.rgb(33, 150, 243, 95))

// LB MA uptrend
f_LazyLine(_data, _length) =>
    w1 = 0, w2 = 0, w3 = 0
    L1 = 0.0, L2 = 0.0, L3 = 0.0
    w = _length / 3
    
    if _length > 2 
        w2 := round(w) // make a integer square
        w1 := round((_length-w2)/2) // cut it in half
        w3 := int((_length-w2)/2) // make it an integer square
        
        L1 := wma(_data, w1) // average in steps of perfect squares 
        L2 := wma(L1, w2) // fold a second time
        L3 := wma(L2, w3) // fold squares a third time - this makes a line that "fits"
    else
        L3 := _data
    L3
    
price       = input(title = "Source",                 type = input.source,  defval = close)
alpha       = input(title = "Combined Smoothness",    type = input.integer, defval = 14, minval = 1)

LL = f_LazyLine(price, alpha)

c_up        = color.new(#33ff00, 0)
c_dn        = color.new(#ff1111, 0)
uptrend     = LL > LL[1]

//plot(LL,                "SS_WMA Line",  color = uptrend ? c_up : c_dn,  linewidth=1)
//plot(wma(price, alpha), "WMA",          color = color.purple,           display=0)

////////
// Fetch Ingredients 
// [  zig zag ] 


//Input: Labels
messagePriceHighAlert  = ""
messagePriceLowAlert  = ""


//Inpu
//Input: Moving Average
fastPeriodLen = 10
slowPeriodLen = 32
fastPeriod = input(title="Fast Period", group="ZigZag Moving Average", type=input.integer, defval=fastPeriodLen, minval=2, maxval=100, inline="MA")
slowPeriod = input(title="Slow Period", group="ZigZag Moving Average", type=input.integer, defval=slowPeriodLen, minval=2, maxval=100, tooltip = "Number of periods to calculte the fast and slow EMA.", inline="MA")

//Input: Zig-Zag
zigperiod = fastPeriod
upcolor = color.green
downcolor = color.red
txtcol = color.white
zigstyle = "Solid"
zigwidth = 3
len = 5
src = close
var dir1 = 0
var max_array_size = 20
var ziggyzags = array.new_float(0)
messageLabelHigh = messagePriceHighAlert
messageLabelLow = messagePriceLowAlert

//////// 
// Bake
// [

//Function: Truncate
truncate(number, decimals) =>
    factor = pow(10, decimals)
    int(number * factor) / factor

//Function: Percent    
percent(n1, n2) =>
    ((n1 - n2) / n2) * 100
    
//Function: Zig-Zag
add_to_zigzag(pointer, value, bindex)=>
    array.unshift(pointer, bindex)
    array.unshift(pointer, value)
    if array.size(pointer) > max_array_size
        array.pop(pointer)
        array.pop(pointer)
    
update_zigzag(pointer, value, bindex, dir)=>
    if array.size(pointer) == 0
        add_to_zigzag(pointer, value, bindex)
    else
        if (dir == 1 and value > array.get(pointer, 0)) or (dir == -1 and value < array.get(pointer, 0))
            array.set(pointer, 0, value)
            array.set(pointer, 1, bindex)
        0.

//Logic: Zig-Zag
out= ema(src, len)
float highs = highestbars(high, zigperiod) == 0 ? high : na
float lows = lowestbars(low, zigperiod) == 0 ? low : na
dir1 := iff(highs and na(lows), 1, iff(lows and na(highs), -1, dir1))
dir1changed = change(dir1)
if highs or lows
    if dir1changed 
        add_to_zigzag(ziggyzags, dir1 == 1 ? highs : lows, bar_index)
    else
        update_zigzag(ziggyzags, dir1 == 1 ? highs : lows, bar_index, dir1)

if array.size(ziggyzags) >= 6
    var line zzline1 = na
    var label zzlabel1 = na
    var label zzlabelcur = na
    float val = array.get(ziggyzags, 0)
    int point = round(array.get(ziggyzags, 1))
    plabel = ""
    labelcol = downcolor
    if change(val) or change(point)
        float val1 = array.get(ziggyzags, 2)
        int point1 = round(array.get(ziggyzags, 3))
        pr = dir1 == 1 ? tostring(high) : tostring(low)
        if labelTiny 
            plabel := dir1 == 1 ? tostring(high,"#.##") : tostring(low,"#.##")
            plabel += "\n" + tostring(truncate(int(percent(val,val1)), 2)) + "%"
        if labelTiny
            plabel := tostring(truncate(int(percent(val,val1)), 2)) + "%"
        labelcol := dir1 == 1 ? array.get(ziggyzags, 0) > out ? upcolor : downcolor : array.get(ziggyzags, 0) < out ? downcolor : upcolor

        if change(val1) == 0 and change(point1) == 0
            line.delete(zzline1)
            label.delete(zzlabel1)

        if (false)
            zzline1 := line.new(x1 = point, x2 = point1, y1 = val, y2 = val1, color = dir1 == 1 ? upcolor : downcolor, width = zigwidth, style = zigstyle == "Solid" ? line.style_solid : line.style_dotted)
    
        if (lableShow)
            zzlabel1 := label.new(x = point, y = val, text = plabel, color = labelcol, textcolor = txtcol, style = dir1 == 1 ? label.style_label_down : label.style_label_up) 
            labelSize = size.small
            //if labelTiny
            //    labelSize := size.tiny
            label.set_size(zzlabel1, labelSize)
    pROCLevel = roc(close, fastPeriod)
    rocLevels = 0.0
    for n = 0 to fastPeriod-1
        rocLevels += roc(close[n], fastPeriod)
    maROCLevel = rocLevels/fastPeriod
    pivotLevel = percent(close,val)

    plabel := tostring(truncate(pivotLevel, 2)) + "%"
    //plabel += "\n"
    //plabel += "\nRoC: " + tostring(pROCLevel, "#.##") + "%"


    labelcol := dir1 == 1 ? array.get(ziggyzags, 0) > out ? upcolor : downcolor : array.get(ziggyzags, 0) < out ? downcolor : upcolor
        
    if (lableShow)
        if zzlabelcur == na
            zzlabelcur := label.new(bar_index+1, close, text = plabel, textcolor = color.white, style = label.style_label_left, color = close > open ? color.green : color.red)
        label.set_xy(zzlabelcur,bar_index+1, close)
        label.set_color(zzlabelcur,close > open ? color.green : color.red)
        label.set_text(zzlabelcur,plabel)
        label.set_size(zzlabelcur, size.small)
   


plot(basis, "Basis", color=uptrend ? c_up : c_dn)
plot(sma(close,50), style=plot.style_line, color = color.orange,  linewidth=1)
plot(sma(close,100), style=plot.style_line, color = color.white,  linewidth=1)
//plot(sma(close,800), style=plot.style_line, color = color.red,  linewidth=1)
