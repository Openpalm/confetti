// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© demoncoins

//@version=4
//'Relative Vigor Index - RVI'
//-------------------------------------
//An indicator used in technical analysis that measures the conviction of a recent price action and the likelihood that it will continue. 
//The RVI compares the positioning of a security's closing price relative to its price range, and the result is smoothed by calculating an exponential moving average of the values.
//
//The RVI indicator is calculated in a similar fashion to the stochastic oscillator, but the vigor index compares the close relative to the open rather than to the low. 
//Traders expect the RVI value to grow as the bullish trend gains momentum because in this type of environment, 
//a security's closing price tends to be at the top of the range while the open is near the low of the day.
//
//Usage Example: http://www.investopedia.com/ask/answers/012115/how-do-i-use-relative-vigor-index-rvi-create-forex-trading-strategy.asp
//By Futur (Thanks to defcon for the basic RVI code)

study("Homodyne Discriminator", shorttitle = '"confetti"')
         

midline = 0
upper = 0.5
bottom = -0.5
hline(midline, "Center", color=color.new(color.gray, 50), linestyle=hline.style_dashed)
band0 = hline(upper, "Top", color=color.new(color.green, 50), linestyle=hline.style_dashed)
band1 = hline(bottom, "Bottom", color=color.new(color.red, 50), linestyle=hline.style_dashed)
fill(band1, band0, color=color.rgb(126, 87, 194, 90), title="Background")

norm(data) =>
    a = (data-sma(data, 3))
    b = stdev(data,3)
    ema(a/b, 12)

MinMaxNorm(data) => 
    a = data - min(data, 12)
    b = max(data,12) - min(data,12)
    a/b

nbv(data) =>
    volume*data/stdev(volume, 4)
    
// --- Start the Homodyne Discriminator Caculations
//
// Mutable Variables (non-series)
HomodyneDiscriminator(data) =>
    C1     = 0.0962
    C2     = 0.5769
    Df     = 0.5

    //
    float Period = na
    C3      = (nz(Period[1])*0.075+0.54)
    smooth    = ((data*8.0) + (data[1]*6.0) + (data[2]*4.0) + (data[3]))/10.0
    dDeTrend  = (smooth*C1 + nz(smooth[2])*C2 - nz(smooth[4])*C2 - nz(smooth[6])*C1)*C3

    // Compute InPhase and Quadrature components
    Q1      = (dDeTrend*C1 + nz(dDeTrend[2])*C2 - nz(dDeTrend[4])*C2 - nz(dDeTrend[6])*C1)*C3
    I1      = nz(dDeTrend[3])

    // Advance Phase of I1 and Q1 by 90 degrees
    jI      = (I1*C1 + nz(I1[2])*C2 - nz(I1[4])*C2 - nz(I1[6])*C1)*C3
    jQ      = (Q1*C1 + nz(Q1[2])*C2 - nz(Q1[4])*C2 - nz(Q1[6])*C1)*C3

    // Phaser addition for 3 bar averaging
    I2_  = I1 - jQ
    Q2_  = Q1 + jI
    // Smooth i and q components before applying discriminator
    I2 = 0.0
    I2  := 0.2*I2_ + 0.8*nz(I2[1])
    Q2 = 0.0
    Q2  := 0.2*Q2_ + 0.8*nz(Q2[1])

    // Extract Homodyne Discriminator
    Re_ = I2*nz(I2[1]) + Q2*nz(Q2[1])
    Im_ = I2*nz(Q2[1]) - Q2*nz(I2[1])
    Re = 0.0
    Re  := 0.2*Re_ + 0.8*nz(Re[1])
    Im = 0.0
    Im  := 0.2*Im_ + 0.8*nz(Im[1]) 

    dp_ = iff(Re!=0 and Im!=0 , 6.28318/atan(Im/Re) , 0)
    II  = nz(Period[1])
    dp  = max(max(min(min(dp_,1.5*II),50),0.6667*II),6)
    Period := dp*0.2 + nz(Period[1])*0.8
    SmoothPeriod = 0.0
    SmoothPeriod := 0.33*Period + nz(SmoothPeriod[1])*0.67
    RVILength = round(SmoothPeriod*Df -1)
    p = 0.0
    p := p + SmoothPeriod[0]
    p := floor(p)
    p := round(p)
    //plot(p)
    //p = integer()
    CO=volume*close-volume*open
    HL=high*volume-low*volume

    value1 = (CO + 2*CO[1] + 2*CO[2] + CO[3])/6
    value2 = (HL + 2*HL[1] + 2*HL[2] + HL[3])/6
    num=0.0
    denom=0.0

    looplength = 100
    for i = 0 to looplength
        if (i >= RVILength)
            break
        num:=num + value1[i]
        denom:=denom + value2[i]


    RVI=denom!=0?num/denom:0
    RVIsig=(RVI+ 2*RVI[1] + 2*RVI[2] + RVI[3])/6
    [RVI, RVIsig]

[RVI, RVIsig] = HomodyneDiscriminator(close)
//p1 = plot(RVI,color=color.lime,style=plot.style_line,linewidth=1)
//p2 = plot(RVIsig,color=color.red,style=plot.style_line,linewidth=1)

hist = (RVI - RVIsig) * 2
hist_color = hist > 0 ? (hist > hist[1] ? color.lime : color.green) : (hist < hist[1] ? #EF3232 : color.red )
plot(hist, color=hist_color, title="Hist", style=plot.style_columns, transp=75)



// lazybear vol
slow = input(12, "Short period")
fast = input(26, "Long period")
signal = input(9, "Smoothing period")

maFast = ema( volume * close, fast ) / ema( volume, fast ) 
maSlow = ema( volume * close, slow ) / ema( volume, slow ) 
d = maSlow - maFast 
maSignal = ema( d, signal ) 
dm=d-maSignal
d_color=d>=0? (d>d[1]?color.green:color.orange) : (d<d[1]?color.red:color.orange)

moef (data) =>
	src = norm(data)/2
	src1 = nz(src[1], src)
	src2 = nz(src[2], src1)
	src3 = nz(src[3], src2)

	moef = src
	moef := 0.13785 * (2 * src - src1) +
	         0.0007 * (2 * src1 - src2) +
	         0.13785 * (2 * src2 - src3) +
	         1.2103 * nz(moef[1], moef) -
	         0.4867 * nz(moef[2], moef)
	moef
	moefColor = #6d1e7f
	[moef, moefColor]
         

[theMoef, moefColor] = moef(d)
plot((theMoef), title="MOEF", linewidth=1, color=color.fuchsia, transp=0)
dl=plot(norm(d)/2, style=plot.style_line, color=d_color, linewidth=2)
