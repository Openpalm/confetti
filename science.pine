// @version=4
study("science #1", shorttitle='"science #1"')

res = input(title="Timeframe", type=input.resolution, defval="")

HTFo = timeframe.period == '1'   ?   '3'     : 
  timeframe.period == '3'   ?   '5'    : 
  timeframe.period == '5'   ?   '15'    : 
  timeframe.period == '15'  ?   '60'    : 
  timeframe.period == '30'  ?   '120'   : 
  timeframe.period == '45'  ?   '60'   : 
  timeframe.period == '60'  ?   '120'   : 
  timeframe.period == '120' ?   '240'   : 
  timeframe.period == '180' ?   '240'   : 
  timeframe.period == '240' ?   'D'     : 
  timeframe.period == 'D'   ?    'W'    : ""
  
[l, c, h, o, v] = security(syminfo.tickerid, res == "" ? HTFo: res, [low, close, high, open, volume])
[ll, cc, hh, oo, vv] = security(syminfo.tickerid, timeframe.period, [low, close, high, open, volume])
f_LazyLine(_data, _length) =>
    w1 = 0, w2 = 0, w3 = 0
    L1 = 0.0, L2 = 0.0, L3 = 0.0
    w = _length / 3 //divide period lengths by 3. "the number that shall not be counted"
    
    if _length > 2 
        w2 := round(w) // make a integer square
        w1 := round((_length-w2)/2) // cut it in half
        w3 := int((_length-w2)/2) // make it an integer square
        
        L1 := wma(_data, w1) // average in steps of perfect squares 
        L2 := wma(L1, w2) // fold a second time
        L3 := wma(L2, w3) // fold squares a third time - this makes a line that "fits"
    else
        L3 := _data
    L3
    
//stoch
stochMomentum(lo,hi,cloz) =>

    a = input(5, "Stochastic K Length")
    b = input(3, "Stochastic D Length")
    // Range Calculation
    ll = lowest (lo, a)
    hh = highest (hi, a)
    diff = hh - ll
    rdiff = cloz- (hh+ll)/2
    // Nested Moving Average for smoother curves
    avgrel = ema(ema(rdiff,b),b)
    avgdiff = ema(ema(diff,b),b)
    // SMI calculations
    SMI = avgdiff != 0 ? (avgrel/(avgdiff/2)*100) : 0
    SMIsignal = ema(SMI,b)
    [SMI, SMIsignal]
    

//kdj
kdj() =>
    length = input(9, title="period")
    signal = input(3, title="signal")
    hi = highest(h, length)
    lo = lowest(l , length)
    k = 100*((c-lo)/(hi-lo))
    pK = ema(k, signal)
    pD = ema(pK, signal)
    pJ = 3*pK-2*pD
    kshift = 90
    [pK,pD, pJ, kshift]

//RSI

m_rsi(len) => 
    src = input(close, "Source", type = input.source)
    up = rma(max(change(src), 0), len)
    down = rma(-min(change(src), 0), len)
    rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
    rsi

// Calculate RSI
rsi1 = m_rsi(7)
rsi2 = m_rsi(13)
rsi3 = m_rsi(23)
rsicross = rsi1 > rsi2 and rsi2 > rsi3
// Calculate RSI
rsi = rsi(close, 7)
rsi_color = rsi > 75 ? color.red : rsi < 27 ? rsicross? color.yellow : color.green : color.white
 
// volume
norm(data) =>
    a = (data-sma(data, 3))
    b = stdev(data,3)
    ema(a/b, 12)

lb_vol(vol,cloz) =>
    slow = input(12, "Short period")
    fast = input(26, "Long period")
    signal = input(9, "Smoothing period")
    maFast = ema( vol * cloz, fast ) / ema( vol, fast ) 
    maSlow = ema( vol * cloz, slow ) / ema( vol, slow )
    d = maSlow - maFast 
    maSignal = ema( d, signal ) 
    dm=d-maSignal
    d_color=d>=0? (d>d[1]?color.green:color.orange) : (d<d[1]?color.red:color.orange)
    [d, dm, d_color]
 
//moef 

moef (data) =>
	src = norm(data)*1.1
	src1 = nz(src[1], src)
	src2 = nz(src[2], src1)
	src3 = nz(src[3], src2)

	moef = src
	moef := 0.13785 * (2 * src - src1) +
	         0.0007 * (2 * src1 - src2) +
	         0.13785 * (2 * src2 - src3) +
	         1.2103 * nz(moef[1], moef) -
	         0.4867 * nz(moef[2], moef)
	moef
	moefColor = #6d1e7f
	[moef, moefColor]

//calculate values
[d, dm, d_color] = lb_vol(vv,cc)
[cd, cdm, cd_color] = lb_vol(volume,close)
[theMoef, moefColor] = moef(cd)
[pK, pD, pJ, kshift] = kdj()
[SMI, SMIsignal] = stochMomentum(low, high, close) 

// Plotting



//band4 = hline(-300, "stoch", color=color.new(color.gray, 50), linestyle=hline.style_dashed) // stoch
//RSI
plot(rsi, color= rsi_color, transp=0, linewidth=2, style=plot.style_circles, title="RSI")
band0 = hline(100, "rsi", color=color.new(color.gray, 50), linestyle=hline.style_dashed) // rsi
band1 = hline(0, "Center", color=color.new(color.gray, 50), linestyle=hline.style_dashed)

//KDJ
pJColor = if (change(pJ) > 0)
    color.green
else 
    color.fuchsia

KDJShift = kshift
band2 = hline(-100, "kdj", color=color.new(color.gray, 50), linestyle=hline.style_dashed) // kdj
plot(avg(pK, pD)/1.5-KDJShift, color=color.orange, transp=0, linewidth=1, title="KD")
plot(pJ/1.5-KDJShift, color=pJColor, transp=0, linewidth=1, title="J")

//stoch
stochShift = 140
SMIColor = if (change(SMIsignal) > 0)
    color.green
else 
    color.red
plot(SMI-stochShift, title = "Stochastic Momentum Index")
plot(SMIsignal-stochShift,  color=SMIColor, title = "SMI Signal Line")
stochOverbought = hline(40-stochShift, color = color.red, title = "Over Bought")
stochOversold = hline(-40-stochShift, color = color.green, title = "Over Sold")
band3 = stochOversold 
fill(band0, band3, color=color.rgb(126, 87, 194, 90), title="Background")
